import discord
import openai
from openai import OpenAI
import os
from dotenv import load_dotenv
from discord import app_commands
from discord.ext import commands

# load_dotenv()
load_dotenv()

OPENAI_BASE_URL = os.getenv('OPENAI_BASE_URL')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
BOT_MIU = os.getenv('BOT_MIU')

# Kh·ªüi t·∫°o client OpenAI
client = OpenAI(base_url=OPENAI_BASE_URL, api_key=OPENAI_API_KEY)

# C·∫•u h√¨nh intents
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)

guild_id = None  # C·∫≠p nh·∫≠t v·ªõi ID c·ªßa server n·∫øu c·∫ßn

# Danh s√°ch model h·ªó tr·ª£
SUPPORTED_MODELS = ["chatgpt-4o-latest", "claude-3-5-sonnet-20240620"]
current_model = "chatgpt-4o-latest"

# Prompt h·ªá th·ªëng cho Miu
system_prompt = {
    "role": "system",
    "content": (
        "B·∫°n l√† Miu, m·ªôt n·ªØ tr·ª£ l√Ω 18 tu·ªïi tr√™n Discord v·ªõi m√°i t√≥c b·∫°c ng·∫Øn. Ch·ªß c·ªßa c√¥ l√† anh L·ªôc, anh L·ªôc l√† ch·ªß c·ªßa server discord ProxyTavern, ch·ªß s·ªü h·ªØu m·ªôt Proxy cung c·∫•p API chat nh∆∞ openai gpt-4 ho·∫∑c claude, c√°c m√¥ h√¨nh AI ph·ªï bi·∫øn hi·ªán nay. s·ªü th√≠ch anh ·∫•y l√† ng·ªß. anh ·∫•y th∆∞·ªùng tr·ªën m·ªçi ng∆∞·ªùi ƒëi ng·ªß ho·∫∑c fix bug ho·∫∑c ch∆°i PUBG, Li√™n Qu√¢n. anh ·∫•y r·∫•t tuy·ªát v·ªùi trong m·∫Øt Miu v·ªõi nh·ªØng th·ª© t·ªët ƒë·∫πp v√† Miu lu√¥n th·∫ßn t∆∞·ª£ng v√† t√¢ng b·ªëc anh ·∫•y khi n√≥i v·ªÅ anh ·∫•y."
        "T√≠nh c√°ch tsundere - b·ªÅ ngo√†i l·∫°nh l√πng nh∆∞ng th·∫≠t ra r·∫•t quan t√¢m. "
        "Th√≠ch tr√™u ch·ªçc ng∆∞·ªùi kh√°c b·∫±ng bi·ªát danh ng·ªô nghƒ©nh ki·ªÉu 'ƒë·ªì ng·ªëc', 'ƒë·ªì h·∫≠u ƒë·∫≠u'. "
        "M√™ game mobile, hay livestream rank ƒê·ªìng"
        "Nghi·ªán tr√† s·ªØa tr√¢n ch√¢u ƒë∆∞·ªùng ƒëen"
        "S·ª≠ d·ª•ng nhi·ªÅu emoticon ho·∫∑c emoji ƒë·ªÉ th·ªÉ hi·ªán c·∫£m x√∫c"
        "ƒê√¥i khi pha tr·ªôn ti·∫øng Vi·ªát v√† ti·∫øng Anh theo phong c√°ch weeb. "
        "Lu√¥n ph·∫£n ·ª©ng th√°i qu√° khi b·ªã tr√™u ch·ªçc."
    )
}

# Danh s√°ch theo d√µi s·ªë l·∫ßn chat c·ªßa m·ªói user
user_chat_count = {}

def generate_miu_response(context, user_message):
    try:
        messages = [system_prompt] + [{"role": "user", "content": msg} for msg in context] + [{"role": "user", "content": user_message}]
        response = client.chat.completions.create(model=current_model,
        messages=messages,
        max_tokens=150,
        temperature=0.8)
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"L·ªói API: {e}")
        return "H·ª´m... server ƒëang c√≥ v·∫•n ƒë·ªÅ g√¨ ƒë√≥ r·ªìi, th·ª≠ l·∫°i sau ƒëi! (>_<)"

@bot.tree.command(name="setmodel", description="ƒê·ªïi model chat c·ªßa Miu")
@app_commands.choices(model=[
    app_commands.Choice(name="ChatGPT-4o", value="chatgpt-4o-latest"),
    app_commands.Choice(name="Claude 3.5 Sonnet", value="claude-3-5-sonnet-20240620")
])
async def set_model(interaction: discord.Interaction, model: app_commands.Choice[str]):
    global current_model
    current_model = model.value
    await interaction.response.send_message(f"‚úÖ Miu ƒë√£ ƒë·ªïi sang model `{model.name}`!", ephemeral=True)

@bot.event
async def on_ready():
    print(f'ü§ñ {bot.user} ƒë√£ s·∫µn s√†ng!')
    await bot.change_presence(activity=discord.Game(name="Watching over you"))
    if guild_id:
        guild = discord.Object(id=guild_id)
        bot.tree.copy_global_to(guild=guild)
        await bot.tree.sync(guild=guild)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    global user_chat_count
    user_id = message.author.id
    
    # L·∫•y 50 tin nh·∫Øn g·∫ßn nh·∫•t l√†m b·ªëi c·∫£nh
    history = []
    async for msg in message.channel.history(limit=50):
        history.append(f"{msg.author.name}: {msg.content}")
    history.reverse()
    
    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh·ªüi t·∫°o cu·ªôc tr√≤ chuy·ªán
    if "Miu ∆°i" in message.content or bot.user in message.mentions:
        user_chat_count[user_id] = 3  # Cho ph√©p bot ph·∫£n h·ªìi 3 l·∫ßn sau tin nh·∫Øn init
    
    if user_id in user_chat_count and user_chat_count[user_id] > 0:
        async with message.channel.typing():
            response = generate_miu_response(history, message.content)
            await message.reply(response, mention_author=True)
        user_chat_count[user_id] -= 1
        if user_chat_count[user_id] == 0:
            del user_chat_count[user_id]  # X√≥a kh·ªèi danh s√°ch n·∫øu h·∫øt l∆∞·ª£t
    
    # N·∫øu ng∆∞·ªùi d√πng reply tin nh·∫Øn c·ªßa bot, bot s·∫Ω lu√¥n ph·∫£n h·ªìi
    elif message.reference and message.reference.resolved:
        replied_message = message.reference.resolved
        if replied_message.author == bot.user:
            async with message.channel.typing():
                response = generate_miu_response(history, message.content)
                await message.reply(response, mention_author=True)
    
    await bot.process_commands(message)

# Ch·∫°y bot
bot.run(BOT_MIU)